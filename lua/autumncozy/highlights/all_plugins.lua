-- All plugin highlights for AutumnCozy

local M = {}

function M.setup(hl, colors, conf)
  -- Aerial (code outline/symbols)
  hl("AerialNormal", { fg = colors.fg, bg = colors.bg_alt })
  hl("AerialGuide", { fg = colors.beige_dark })
  hl("AerialLine", { fg = colors.fg, bg = colors.bg_highlight, bold = true })
  hl("AerialArrayIcon", { fg = colors.yellow_dim })
  hl("AerialBooleanIcon", { fg = colors.red })
  hl("AerialClassIcon", { fg = colors.blue_light })
  hl("AerialConstantIcon", { fg = colors.yellow })
  hl("AerialConstructorIcon", { fg = colors.fg })
  hl("AerialEnumIcon", { fg = colors.blue_light })
  hl("AerialEnumMemberIcon", { fg = colors.beige })
  hl("AerialEventIcon", { fg = colors.red })
  hl("AerialFieldIcon", { fg = colors.fg_dim })
  hl("AerialFileIcon", { fg = colors.beige_dark })
  hl("AerialFunctionIcon", { fg = colors.fg })
  hl("AerialInterfaceIcon", { fg = colors.blue_light })
  hl("AerialKeyIcon", { fg = colors.red })
  hl("AerialMethodIcon", { fg = colors.fg })
  hl("AerialModuleIcon", { fg = colors.blue_light })
  hl("AerialNamespaceIcon", { fg = colors.blue_light })
  hl("AerialNullIcon", { fg = colors.beige_dark })
  hl("AerialNumberIcon", { fg = colors.yellow_dim })
  hl("AerialObjectIcon", { fg = colors.beige })
  hl("AerialOperatorIcon", { fg = colors.red_dim })
  hl("AerialPackageIcon", { fg = colors.blue_light })
  hl("AerialPropertyIcon", { fg = colors.fg_dim })
  hl("AerialStringIcon", { fg = colors.yellow })
  hl("AerialStructIcon", { fg = colors.blue_light })
  hl("AerialTypeParameterIcon", { fg = colors.blue_light })
  hl("AerialVariableIcon", { fg = colors.fg_dim })

  -- Mason (LSP installer)
  hl("MasonNormal", { fg = colors.fg, bg = colors.bg_alt })
  hl("MasonHeader", { fg = colors.yellow, bg = colors.bg_highlight, bold = true })
  hl("MasonHeaderSecondary", { fg = colors.red, bg = colors.bg_highlight, bold = true })
  hl("MasonHighlight", { fg = colors.blue_light })
  hl("MasonHighlightBlock", { fg = colors.bg, bg = colors.blue_light })
  hl("MasonHighlightBlockBold", { fg = colors.bg, bg = colors.blue_light, bold = true })
  hl("MasonHighlightSecondary", { fg = colors.red })
  hl("MasonHighlightBlockSecondary", { fg = colors.bg, bg = colors.red })
  hl("MasonHighlightBlockBoldSecondary", { fg = colors.bg, bg = colors.red, bold = true })
  hl("MasonMuted", { fg = colors.fg_dim })
  hl("MasonMutedBlock", { fg = colors.bg, bg = colors.fg_dim })
  hl("MasonMutedBlockBold", { fg = colors.bg, bg = colors.fg_dim, bold = true })
  hl("MasonError", { fg = colors.red })

  -- Lazy (plugin manager)
  hl("LazyNormal", { fg = colors.fg, bg = colors.bg_alt })
  hl("LazyButton", { fg = colors.fg_dim, bg = colors.bg_highlight })
  hl("LazyButtonActive", { fg = colors.fg, bg = colors.blue_light, bold = true })
  hl("LazyComment", { fg = colors.beige_dark, italic = true })
  hl("LazyCommit", { fg = colors.yellow })
  hl("LazyCommitIssue", { fg = colors.red })
  hl("LazyCommitType", { fg = colors.blue_light })
  hl("LazyDir", { fg = colors.blue_light })
  hl("LazyH1", { fg = colors.yellow, bg = colors.bg_highlight, bold = true })
  hl("LazyH2", { fg = colors.red, bg = colors.bg_highlight, bold = true })
  hl("LazyNoCond", { fg = colors.red_dim })
  hl("LazyProgressDone", { fg = colors.yellow })
  hl("LazyProgressTodo", { fg = colors.fg_dim })
  hl("LazyProp", { fg = colors.beige })
  hl("LazyReasonCmd", { fg = colors.red })
  hl("LazyReasonEvent", { fg = colors.yellow_dim })
  hl("LazyReasonFt", { fg = colors.blue_light })
  hl("LazyReasonImport", { fg = colors.beige })
  hl("LazyReasonKeys", { fg = colors.red_dim })
  hl("LazyReasonPlugin", { fg = colors.fg })
  hl("LazyReasonRuntime", { fg = colors.yellow })
  hl("LazyReasonSource", { fg = colors.blue_light })
  hl("LazyReasonStart", { fg = colors.red })
  hl("LazyReasonTask", { fg = colors.yellow_dim })
  hl("LazySpecial", { fg = colors.yellow })
  hl("LazyTaskError", { fg = colors.red })
  hl("LazyTaskOutput", { fg = colors.fg_dim })
  hl("LazyUrl", { fg = colors.blue_light, underline = true })
  hl("LazyValue", { fg = colors.beige })

  -- Hop/Flash (motion plugins)
  hl("HopNextKey", { fg = colors.yellow, bold = true })
  hl("HopNextKey1", { fg = colors.red, bold = true })
  hl("HopNextKey2", { fg = colors.red_dim })
  hl("HopUnmatched", { fg = colors.beige_dark })
  hl("HopCursor", { fg = colors.yellow_dim })
  hl("HopPreview", { fg = colors.blue_light, bg = colors.bg_highlight })
  hl("FlashBackdrop", { fg = colors.beige_dark })
  hl("FlashLabel", { fg = colors.bg, bg = colors.yellow, bold = true })
  hl("FlashMatch", { fg = colors.fg, bg = colors.bg_alt })
  hl("FlashCurrent", { fg = colors.fg, bg = colors.blue_light })
  hl("FlashCursor", { fg = colors.bg, bg = colors.red })
  hl("FlashPrompt", { fg = colors.fg, bg = colors.bg_alt })

  -- Dashboard (start screen, alternative to Alpha)
  hl("DashboardHeader", { fg = colors.red, bold = true })
  hl("DashboardFooter", { fg = colors.beige_dark, italic = true })
  hl("DashboardCenter", { fg = colors.fg })
  hl("DashboardShortcut", { fg = colors.blue_light })
  hl("DashboardDesc", { fg = colors.yellow })
  hl("DashboardKey", { fg = colors.red_dim })
  hl("DashboardIcon", { fg = colors.yellow_dim })
  hl("DashboardProjectTitle", { fg = colors.fg })
  hl("DashboardProjectTitleIcon", { fg = colors.blue_light })
  hl("DashboardProjectIcon", { fg = colors.beige })
  hl("DashboardMruTitle", { fg = colors.fg_dim })
  hl("DashboardMruIcon", { fg = colors.yellow })
  hl("DashboardFiles", { fg = colors.fg_dim })
  hl("DashboardLoading", { fg = colors.beige_dark })

  -- Barbar (tabline buffers, alternative to Bufferline)
  hl("BarbarBufferVisible", { fg = colors.fg, bg = colors.bg_highlight })
  hl("BarbarBufferCurrent", { fg = colors.fg, bg = colors.blue_light, bold = true })
  hl("BarbarBufferCurrentMod", { fg = colors.yellow, bg = colors.blue_light, bold = true })
  hl("BarbarBufferCurrentSign", { fg = colors.red, bg = colors.blue_light })
  hl("BarbarBufferInactive", { fg = colors.fg_dim, bg = colors.bg_alt })
  hl("BarbarBufferInactiveMod", { fg = colors.yellow_dim, bg = colors.bg_alt })
  hl("BarbarBufferInactiveSign", { fg = colors.beige_dark, bg = colors.bg_alt })
  hl("BarbarBufferAlternate", { fg = colors.beige, bg = colors.bg_highlight })
  hl("BarbarBufferAlternateMod", { fg = colors.yellow, bg = colors.bg_highlight })
  hl("BarbarBufferAlternateSign", { fg = colors.red_dim, bg = colors.bg_highlight })

  -- nvim-dap (debugger)
  hl("DapBreakpoint", { fg = colors.red })
  hl("DapBreakpointCondition", { fg = colors.yellow })
  hl("DapBreakpointRejected", { fg = colors.red_dim })
  hl("DapLogPoint", { fg = colors.blue_light })
  hl("DapStopped", { fg = colors.yellow_dim })
  -- DAP UI
  hl("DapUINormal", { fg = colors.fg, bg = colors.bg_alt })
  hl("DapUIFloatBorder", { fg = colors.beige, bg = colors.bg_alt })
  hl("DapUIStoppedThread", { fg = colors.yellow })
  hl("DapUIThread", { fg = colors.blue_light })
  hl("DapUIWatchesEmpty", { fg = colors.red_dim })
  hl("DapUIWatchesValue", { fg = colors.yellow_dim })
  hl("DapUIWatchesError", { fg = colors.red })
  hl("DapUIBreakpointsPath", { fg = colors.blue_light })
  hl("DapUIBreakpointsInfo", { fg = colors.beige })
  hl("DapUIBreakpointsCurrentLine", { fg = colors.yellow, bold = true })
  hl("DapUIBreakpointsDisabledLine", { fg = colors.beige_dark })
  hl("DapUIScope", { fg = colors.red })
  hl("DapUIValue", { fg = colors.fg_dim })
  hl("DapUIModifiedValue", { fg = colors.yellow, bold = true })
  hl("DapUIDecoration", { fg = colors.beige })
  hl("DapUIFrameName", { fg = colors.fg })
  hl("DapUISource", { fg = colors.blue_light })
  hl("DapUILineNumber", { fg = colors.beige_dark })

  -- Rainbow Delimiters (for Treesitter)
  hl("RainbowDelimiterRed", { fg = colors.red })
  hl("RainbowDelimiterYellow", { fg = colors.yellow })
  hl("RainbowDelimiterBlue", { fg = colors.blue_light })
  hl("RainbowDelimiterOrange", { fg = colors.yellow_dim })
  hl("RainbowDelimiterGreen", { fg = colors.beige })
  hl("RainbowDelimiterViolet", { fg = colors.red_dim })
  hl("RainbowDelimiterCyan", { fg = colors.beige_dark })

  -- Illuminate (word highlighting)
  hl("IlluminatedWordText", { bg = colors.bg_highlight })
  hl("IlluminatedWordRead", { bg = colors.bg_highlight })
  hl("IlluminatedWordWrite", { bg = colors.bg_highlight })

  -- Todo-comments.nvim (todo/highlight keywords)
  hl("TodoBgTODO", { fg = colors.bg, bg = colors.yellow, bold = true })
  hl("TodoFgTODO", { fg = colors.yellow })
  hl("TodoBgNOTE", { fg = colors.bg, bg = colors.beige, bold = true })
  hl("TodoFgNOTE", { fg = colors.beige })
  hl("TodoBgWARN", { fg = colors.bg, bg = colors.yellow_dim, bold = true })
  hl("TodoFgWARN", { fg = colors.yellow_dim })
  hl("TodoBgPERF", { fg = colors.bg, bg = colors.blue_light, bold = true })
  hl("TodoFgPERF", { fg = colors.blue_light })
  hl("TodoBgHACK", { fg = colors.bg, bg = colors.red_dim, bold = true })
  hl("TodoFgHACK", { fg = colors.red_dim })
  hl("TodoBgFIX", { fg = colors.bg, bg = colors.red, bold = true })
  hl("TodoFgFIX", { fg = colors.red })
  hl("TodoBgTEST", { fg = colors.bg, bg = colors.fg_dim, bold = true })
  hl("TodoFgTEST", { fg = colors.fg_dim })

  -- Neogit (Git interface)
  hl("NeogitBranch", { fg = colors.yellow })
  hl("NeogitRemote", { fg = colors.red })
  hl("NeogitHunkHeader", { fg = colors.fg, bg = colors.bg_highlight })
  hl("NeogitHunkHeaderHighlight", { fg = colors.fg, bg = colors.blue_light, bold = true })
  hl("NeogitDiffContextHighlight", { fg = colors.fg_dim, bg = colors.bg_alt })
  hl("NeogitDiffAdd", { fg = colors.yellow, bg = colors.bg_highlight })
  hl("NeogitDiffAddHighlight", { fg = colors.yellow, bg = colors.bg_alt })
  hl("NeogitDiffDelete", { fg = colors.red, bg = colors.bg_highlight })
  hl("NeogitDiffDeleteHighlight", { fg = colors.red, bg = colors.bg_alt })
  hl("NeogitChangeModified", { fg = colors.blue_light, bold = true })
  hl("NeogitChangeAdded", { fg = colors.yellow, bold = true })
  hl("NeogitChangeDeleted", { fg = colors.red, bold = true })
  hl("NeogitChangeNewFile", { fg = colors.yellow_dim, bold = true })
  hl("NeogitChangeRenamed", { fg = colors.red_dim, bold = true })
  hl("NeogitChangeUpdated", { fg = colors.beige, bold = true })
  hl("NeogitChangeCopied", { fg = colors.fg_dim, bold = true })
  hl("NeogitChangeBothModified", { fg = colors.yellow, bold = true })
  hl("NeogitChangeUnmerged", { fg = colors.red, bold = true })
  hl("NeogitObjectId", { fg = colors.beige_dark })
  hl("NeogitStash", { fg = colors.fg_dim })
  hl("NeogitRebaseDone", { fg = colors.beige_dark })
  hl("NeogitNotificationInfo", { fg = colors.beige })
  hl("NeogitNotificationWarning", { fg = colors.yellow })
  hl("NeogitNotificationError", { fg = colors.red })
  hl("NeogitPopupSwitchKey", { fg = colors.red_dim })
  hl("NeogitPopupOptionKey", { fg = colors.yellow_dim })
  hl("NeogitPopupConfigKey", { fg = colors.blue_light })
  hl("NeogitPopupActionKey", { fg = colors.fg })

  -- Fidget.nvim (LSP progress spinner)
  hl("FidgetTitle", { fg = colors.yellow, bold = true })
  hl("FidgetTask", { fg = colors.fg_dim })

  -- Oil.nvim (file explorer/editor)
  hl("OilDir", { fg = colors.blue_light })
  hl("OilFile", { fg = colors.fg_dim })
  hl("OilLink", { fg = colors.yellow_dim, underline = true })
  hl("OilSocket", { fg = colors.red_dim })
  hl("OilTrash", { fg = colors.red })
  hl("OilTrashSource", { fg = colors.red_dim })
  hl("OilCreate", { fg = colors.yellow })
  hl("OilDelete", { fg = colors.red })
  hl("OilMove", { fg = colors.beige })
  hl("OilCopy", { fg = colors.yellow_dim })
  hl("OilChange", { fg = colors.blue_light })
  hl("OilRestore", { fg = colors.fg_dim })
  hl("OilPermission", { fg = colors.beige_dark })
  hl("OilOwner", { fg = colors.fg })
  hl("OilMtime", { fg = colors.beige_dark })
  hl("OilSize", { fg = colors.yellow_dim })

  -- Render-markdown.nvim or similar Markdown rendering
  hl("RenderMarkdownH1", { fg = colors.red, bold = true })
  hl("RenderMarkdownH2", { fg = colors.yellow, bold = true })
  hl("RenderMarkdownH3", { fg = colors.blue_light, bold = true })
  hl("RenderMarkdownH4", { fg = colors.red_dim, bold = true })
  hl("RenderMarkdownH5", { fg = colors.yellow_dim, bold = true })
  hl("RenderMarkdownH6", { fg = colors.beige, bold = true })
  hl("RenderMarkdownCode", { bg = colors.bg_alt })
  hl("RenderMarkdownBullet", { fg = colors.fg_dim })
  hl("RenderMarkdownTableHead", { fg = colors.fg, bold = true })
  hl("RenderMarkdownTableRow", { fg = colors.fg_dim })
  hl("RenderMarkdownDash", { fg = colors.beige_dark })
  hl("RenderMarkdownQuote", { fg = colors.yellow_dim })
  hl("RenderMarkdownMath", { fg = colors.blue_light })

  -- Overseer.nvim (task runner)
  hl("OverseerPENDING", { fg = colors.fg_dim })
  hl("OverseerRUNNING", { fg = colors.yellow })
  hl("OverseerSUCCESS", { fg = colors.beige })
  hl("OverseerCANCELED", { fg = colors.red_dim })
  hl("OverseerFAILURE", { fg = colors.red })
  hl("OverseerTask", { fg = colors.fg })
  hl("OverseerTaskBorder", { fg = colors.beige_dark })
  hl("OverseerOutput", { fg = colors.fg_dim })
  hl("OverseerComponent", { fg = colors.blue_light })
  hl("OverseerField", { fg = colors.yellow_dim })

  -- Outline.nvim or Symbols-outline (code outline)
  hl("OutlineFoldMarker", { fg = colors.beige_dark })
  hl("OutlineDetails", { fg = colors.fg_dim })
  hl("OutlineLineno", { fg = colors.beige_dark })
  hl("OutlineGuides", { fg = colors.red_dim })
  hl("OutlineFile", { fg = colors.yellow, bold = true })
  hl("OutlineDeprecated", { fg = colors.red_dim, strikethrough = true })

  -- LuaSnip (snippet engine)
  hl("LuaSnipActiveChoiceNode", { fg = colors.yellow, bold = true })
  hl("LuaSnipPassiveChoiceNode", { fg = colors.yellow_dim })
  hl("LuaSnipActiveInsertNode", { fg = colors.red, bg = colors.bg_highlight })
  hl("LuaSnipPassiveInsertNode", { fg = colors.red_dim })
  hl("LuaSnipSnippetPassive", { fg = colors.fg_dim, italic = true })
  hl("LuaSnipSnippetActive", { fg = colors.fg, italic = true })
  hl("LuaSnipChoiceNode", { fg = colors.blue_light })
  hl("LuaSnipInsertNode", { fg = colors.red })

  -- Feline.nvim (statusline, alternative to Lualine)
  hl("FelineNormal", { fg = colors.fg, bg = colors.bg_alt })
  hl("FelineInsert", { fg = colors.yellow, bg = colors.bg_alt })
  hl("FelineVisual", { fg = colors.red, bg = colors.bg_alt })
  hl("FelineReplace", { fg = colors.red_dim, bg = colors.bg_alt })
  hl("FelineCommand", { fg = colors.blue_light, bg = colors.bg_alt })
  hl("FelineTerminal", { fg = colors.beige, bg = colors.bg_alt })
  hl("FelineInactive", { fg = colors.fg_dim, bg = colors.bg_highlight })
  hl("FelineSeparator", { fg = colors.beige_dark })
  hl("FelineSeparatorSlant", { fg = colors.beige_dark })

  -- Navic (winbar navigation)
  hl("NavicIconsFile", { fg = colors.beige_dark })
  hl("NavicIconsModule", { fg = colors.blue_light })
  hl("NavicIconsNamespace", { fg = colors.blue_light })
  hl("NavicIconsPackage", { fg = colors.blue_light })
  hl("NavicIconsClass", { fg = colors.blue_light })
  hl("NavicIconsMethod", { fg = colors.fg })
  hl("NavicIconsProperty", { fg = colors.fg_dim })
  hl("NavicIconsField", { fg = colors.fg_dim })
  hl("NavicIconsConstructor", { fg = colors.fg })
  hl("NavicIconsEnum", { fg = colors.blue_light })
  hl("NavicIconsInterface", { fg = colors.blue_light })
  hl("NavicIconsFunction", { fg = colors.fg })
  hl("NavicIconsVariable", { fg = colors.fg_dim })
  hl("NavicIconsConstant", { fg = colors.yellow })
  hl("NavicIconsString", { fg = colors.yellow })
  hl("NavicIconsNumber", { fg = colors.yellow_dim })
  hl("NavicIconsBoolean", { fg = colors.red })
  hl("NavicIconsArray", { fg = colors.yellow_dim })
  hl("NavicIconsObject", { fg = colors.beige })
  hl("NavicIconsKey", { fg = colors.red })
  hl("NavicIconsNull", { fg = colors.beige_dark })
  hl("NavicIconsEnumMember", { fg = colors.beige })
  hl("NavicIconsStruct", { fg = colors.blue_light })
  hl("NavicIconsEvent", { fg = colors.red })
  hl("NavicIconsOperator", { fg = colors.red_dim })
  hl("NavicIconsTypeParameter", { fg = colors.blue_light })
  hl("NavicText", { fg = colors.fg_dim })
  hl("NavicSeparator", { fg = colors.beige_dark })

  -- Breadcrumbs / lspSaga breadcrumb
  hl("BreadcrumbText", { fg = colors.fg_dim })
  hl("BreadcrumbSeparator", { fg = colors.beige_dark })

  -- Harpoon (mark navigation)
  hl("HarpoonWindow", { fg = colors.fg, bg = colors.bg_alt })
  hl("HarpoonBorder", { fg = colors.beige, bg = colors.bg_alt })

  -- Spectre (search and replace)
  hl("SpectreHeader", { fg = colors.yellow, bold = true })
  hl("SpectreBody", { fg = colors.fg })
  hl("SpectreBorder", { fg = colors.beige })
  hl("SpectreSearch", { fg = colors.red, bg = colors.bg_highlight })
  hl("SpectreReplace", { fg = colors.yellow, bg = colors.bg_highlight })
  hl("SpectreFile", { fg = colors.blue_light, bold = true })
  hl("SpectreDir", { fg = colors.blue_light })
  hl("SpectreDescription", { fg = colors.fg_dim })

  -- Diffview.nvim (git diff viewer)
  hl("DiffviewNormal", { fg = colors.fg, bg = colors.bg_alt })
  hl("DiffviewCursorLine", { bg = colors.bg_highlight })
  hl("DiffviewFilePanelTitle", { fg = colors.yellow, bold = true })
  hl("DiffviewFilePanelCounter", { fg = colors.red, bold = true })
  hl("DiffviewFilePanelFileName", { fg = colors.fg })
  hl("DiffviewFilePanelPath", { fg = colors.fg_dim })
  hl("DiffviewFilePanelInsertions", { fg = colors.yellow })
  hl("DiffviewFilePanelDeletions", { fg = colors.red })
  hl("DiffviewStatusAdded", { fg = colors.yellow })
  hl("DiffviewStatusModified", { fg = colors.beige })
  hl("DiffviewStatusRenamed", { fg = colors.red_dim })
  hl("DiffviewStatusDeleted", { fg = colors.red })
  hl("DiffviewStatusUntracked", { fg = colors.fg_dim })
  hl("DiffviewStatusBroken", { fg = colors.red })
  hl("DiffviewDiffAdd", { fg = colors.yellow, bg = colors.bg_highlight })
  hl("DiffviewDiffChange", { fg = colors.beige, bg = colors.bg_highlight })
  hl("DiffviewDiffDelete", { fg = colors.red, bg = colors.bg_highlight })
  hl("DiffviewDiffDeleteDim", { fg = colors.red_dim, bg = colors.bg_highlight })

  -- Toggleterm.nvim (terminal integration)
  hl("ToggleTermNormal", { fg = colors.fg, bg = colors.bg_alt })
  hl("ToggleTermBorder", { fg = colors.beige, bg = colors.bg_alt })
  hl("ToggleTermName", { fg = colors.yellow, bold = true })

  -- Neorg (note-taking)
  hl("NeorgHeading1Title", { fg = colors.red, bold = true })
  hl("NeorgHeading1Prefix", { fg = colors.red })
  hl("NeorgHeading2Title", { fg = colors.yellow, bold = true })
  hl("NeorgHeading2Prefix", { fg = colors.yellow })
  hl("NeorgHeading3Title", { fg = colors.blue_light, bold = true })
  hl("NeorgHeading3Prefix", { fg = colors.blue_light })
  hl("NeorgHeading4Title", { fg = colors.red_dim, bold = true })
  hl("NeorgHeading4Prefix", { fg = colors.red_dim })
  hl("NeorgHeading5Title", { fg = colors.yellow_dim, bold = true })
  hl("NeorgHeading5Prefix", { fg = colors.yellow_dim })
  hl("NeorgHeading6Title", { fg = colors.beige, bold = true })
  hl("NeorgHeading6Prefix", { fg = colors.beige })
  hl("NeorgMarkupVerbatim", { bg = colors.bg_alt })
  hl("NeorgMarkupBold", { bold = true })
  hl("NeorgMarkupItalic", { italic = true })
  hl("NeorgMarkupUnderline", { underline = true })
  hl("NeorgMarkupStrikethrough", { strikethrough = true })
  hl("NeorgMarkupSpoiler", { fg = colors.bg_alt, bg = colors.fg_dim })
  hl("NeorgUnorderedList1", { fg = colors.fg_dim })
  hl("NeorgTodoItem1Pending", { fg = colors.yellow_dim })
  hl("NeorgTodoItem1Done", { fg = colors.beige_dark, strikethrough = true })

  -- Markdown.nvim or Markdown-preview
  hl("MarkdownCode", { fg = colors.fg_dim, bg = colors.bg_alt })
  hl("MarkdownCodeBlock", { bg = colors.bg_alt })
  hl("MarkdownHeading1", { fg = colors.red, bold = true })
  hl("MarkdownHeading2", { fg = colors.yellow, bold = true })
  hl("MarkdownHeading3", { fg = colors.blue_light, bold = true })
  hl("MarkdownHeading4", { fg = colors.red_dim, bold = true })
  hl("MarkdownHeading5", { fg = colors.yellow_dim, bold = true })
  hl("MarkdownHeading6", { fg = colors.beige, bold = true })
  hl("MarkdownBlockquote", { fg = colors.yellow_dim })
  hl("MarkdownBold", { bold = true })
  hl("MarkdownItalic", { italic = true })
  hl("MarkdownLinkText", { fg = colors.blue_light, underline = true })
  hl("MarkdownUrl", { fg = colors.beige_dark, underline = true })
  hl("MarkdownListMarker", { fg = colors.fg_dim })
  hl("MarkdownOrderedListMarker", { fg = colors.fg_dim })
  hl("MarkdownRule", { fg = colors.beige_dark })

  -- Neotest (testing framework)
  hl("NeotestPassed", { fg = colors.beige })
  hl("NeotestFailed", { fg = colors.red })
  hl("NeotestRunning", { fg = colors.yellow })
  hl("NeotestSkipped", { fg = colors.fg_dim })
  hl("NeotestTest", { fg = colors.fg })
  hl("NeotestNamespace", { fg = colors.blue_light })
  hl("NeotestAdapterName", { fg = colors.red, bold = true })
  hl("NeotestFocused", { bg = colors.bg_highlight })
  hl("NeotestFile", { fg = colors.yellow_dim })
  hl("NeotestDir", { fg = colors.blue_light })
  hl("NeotestIndent", { fg = colors.beige_dark })
  hl("NeotestExpandMarker", { fg = colors.beige_dark })
  hl("NeotestWinSelect", { fg = colors.yellow, bold = true })
  hl("NeotestMarked", { fg = colors.red_dim, bold = true })
  hl("NeotestTarget", { fg = colors.fg_dim })
  hl("NeotestUnknown", { fg = colors.beige_dark })

  -- Zen-mode.nvim (distraction-free)
  hl("ZenBg", { bg = colors.bg })

  -- Twilight.nvim (dim inactive code)
  hl("Twilight", { fg = colors.beige_dark })
end

return M